Solution 1: Brute Force
Time complexity: O(n^3)
Space complesity: O(min(n,m)), where m is the size of the charset/alphabet. 

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        if (s.empty()) return 0;
        
        int maxLen = 1;
        for ( int i = 0; i < s.size(); ++i )
        {
        
            for ( int j = i + maxLen; j < s.size(); ++j )
            {
                if ( !allUnique(s, i, j) ) break; 
                int len = j-i+1;
                maxLen = maxLen > len ? maxLen : len;    
            }
        }
        return maxLen;
    }
    
    bool allUnique(string &s, int start, int end)
    {
        std::map<char, int> charMap; 
        for (int i = start; i <= end; ++i )
        {
            char ch = s[i];
            if (charMap.count(ch)) return false; 
            charMap[ch] = i; 
        }
        return true;        
    }
};

Solution 2: Sliding Window w/ unordered set.
Time complexity: O(n). The worst case each character will be visited twice by i and j, check if a character is contained 
in the map takes O(1), so the time complexity is O(2n) = O(n).
Space complexity: Same as Solution 1, O(min(n,m)).
33%

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        std::unordered_set<char> charSet;
        int i = 0, j = 0, len = 0;
        int n = s.size();
        while( i < n && j < n)
        {
            char ch = s[j];
            if (!charSet.count(ch))
            {
                charSet.insert(ch);
                ++j;
                len = max( len, (j-i) );
            } 
            else 
            {
                charSet.erase(s[i]);
                ++i;
            }
        }
        return len;
    }
};

Solution 3: sliding window w/ map
Time complexity: O(n)
Space complexity: O(min(n, n))
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        std::unordered_map<char, int> chMap; 
        int len = 0;
        for(int i = 0, j = 0; j < s.size(); ++j)
        {
            char ch = s[j];
            if ( chMap.count(ch) )
            {
                i = max(i, chMap[ch] + 1);
            } 
            chMap[ch] = j;
            len = max(len, j-i+1);
        }
        return len;
    }
};
