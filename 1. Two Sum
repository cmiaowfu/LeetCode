Solution 1: Brute Force
Time complexity: O(n^2)
Space complesity: O(1). No extra space required. 

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> index;
        for (int i = 0; i < nums.size(); ++i) 
        {
            int nums_j = target - nums[i];
            for (int j = i+1; j < nums.size(); ++j )
            {
                if (nums_j == nums[j]) 
                {
                    index.push_back(i);
                    index.push_back(j);
                    break;
                }
            }
        }
        return index;
    }
};

Solution 2: Two-pass Hash Table
Time complexity: O(n). Traverse / Loop the n containing elements twice. Map / Hash table reduces the look up time to O(1).
Space complesity: O(n). Extra space required to store the n elements in array. 
Runtime beats 70.97% c++ submissions.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        std::map<int, int> map_nums;
        for (int i = 0; i < nums.size(); ++i)
        {
            map_nums[ nums[i] ] = i;
        }
        
        vector<int> indexes;
        for (int i = 0; i < nums.size(); ++i)
        {
            int tmp = target - nums[i];
            std::map<int, int>::iterator it;
            it = map_nums.find(tmp);
            if( (it != map_nums.end()) && (it->second != i) )
            {
                indexes.push_back(i);
                indexes.push_back(it->second);
                return indexes;
            }    
        }       
    }
};

Solution 3: One-pass Hash Table
Time complexity: O(n). Traverse n elements once. Each look up time is of O(1).
Space complesity: O(n). Extra space required at most n. 

// Using ordered map
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        std::map<int, int> map_nums;
        
        vector<int> indexes;
        for (int i = 0; i < nums.size(); ++i)
        {
            int tmp = target - nums[i];
            std::map<int, int>::iterator it;
            it = map_nums.find(tmp);
            if( (it != map_nums.end()) )
            {
                indexes.push_back(i);
                indexes.push_back(it->second);
                return indexes;
            }    
            map_nums[ nums[i] ] = i;
        }
        
    }
};

// Using unordered_map - beats 92.29%
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        std::vector<int> results;
        std::unordered_map<int, int> nums_map;
        for (int i = 0; i < nums.size(); ++i)
        {
            int complement = target - nums[i];
            std::unordered_map<int, int>::const_iterator it;
            it = nums_map.find( complement );
            if (it != nums_map.end())
            {
                results.push_back(it->second);
                results.push_back(i);
                return results;
            }
            nums_map[nums[i]] = i;
        }
    }
};
