Solution 1: 28.91%

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        if (m > n)
        {
            return findMedianSortedArrays(nums2, nums1);
        }
               
        // m == 0 && n > 0
        if (m==0) 
        {
            if(n%2)
            {
                return nums2[n/2];
            }
            else
            {
                return 0.5*( nums2[n/2] + nums2[n/2-1] );
            }
        }
        
        // m > 0 && n > 0
        vector<int> a = nums1;
        vector<int> b = nums2;
            //binary search
            int imin = 0, imax = m;
            int halfLen = (m+n+1) * 0.5f;
            int i = 0.5f * (imin + imax);
            int j = halfLen - i;
            while (imin < imax)
            {
                if ( (i==0 || j==n || a[i-1] <= b[j]) && (j==0 || i==m || b[j-1]<=a[i]) )
                {
                    break;
                }
                if ((i > 0) && (a[i-1] > b[j]))
                {
                    imax = i-1;
                }
                if((i < m) && (b[j-1] > a[i]))
                {
                    imin = i+1;
                }

                i = 0.5f * (imin + imax);
                j = halfLen - i;
            }

        // process result
            if ( (m+n) % 2 ) // odd => n > m > 0
            { // median = maxL
                if (i == 0) {
                    return b[j-1];
                }

                // if (j == 0) not possible. result in i > m. 
                
                return max(a[i-1], b[j-1]);
            } 
            else // even=> n>=m>0
            { // median = 0.5*(maxL + minR);
                //cal maxL
                int maxL = 0;
                int minR = 0;
                if(i==0)
                {
                    maxL = b[j-1]; 
                }
                else if (j==0)
                {
                    maxL = a[i-1];
                }
                else
                {
                    maxL = max(a[i-1], b[j-1]);
                }
                //cal minR
                if(i==m)
                {
                    minR = b[j];
                }
                else if(j==n)
                {
                    minR = a[i];
                }
                else
                {
                    minR = min(a[i], b[j]);
                }

                return 0.5*(maxL + minR);
            }
        
    }
};
