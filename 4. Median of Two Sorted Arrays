Solution 1: Binary search
28.91%
Time complexity: O( log(min(m,n)) )
Space complexity: 1

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        if (m > n)
        {
            return findMedianSortedArrays(nums2, nums1);
        }
               
        // m == 0 && n > 0
        if (m==0) 
        {
            if(n%2)
            {
                return nums2[n/2];
            }
            else
            {
                return 0.5*( nums2[n/2] + nums2[n/2-1] );
            }
        }
        
        // m > 0 && n > 0
        vector<int> a = nums1;
        vector<int> b = nums2;
            //binary search
            int imin = 0, imax = m;
            int halfLen = (m+n+1) * 0.5f;
            int i = 0.5f * (imin + imax);
            int j = halfLen - i;
            while (imin < imax)
            {
                if ( (i==0 || j==n || a[i-1] <= b[j]) && (j==0 || i==m || b[j-1]<=a[i]) )
                {
                    break;
                }
                if ((i > 0) && (a[i-1] > b[j]))
                {
                    imax = i-1;
                }
                if((i < m) && (b[j-1] > a[i]))
                {
                    imin = i+1;
                }

                i = 0.5f * (imin + imax);
                j = halfLen - i;
            }

        // process result
            if ( (m+n) % 2 ) // odd => n > m > 0
            { // median = maxL
                if (i == 0) {
                    return b[j-1];
                }

                // if (j == 0) not possible. result in i > m. 
                
                return max(a[i-1], b[j-1]);
            } 
            else // even=> n>=m>0
            { // median = 0.5*(maxL + minR);
                //cal maxL
                int maxL = 0;
                int minR = 0;
                if(i==0)
                {
                    maxL = b[j-1]; 
                }
                else if (j==0)
                {
                    maxL = a[i-1];
                }
                else
                {
                    maxL = max(a[i-1], b[j-1]);
                }
                //cal minR
                if(i==m)
                {
                    minR = b[j];
                }
                else if(j==n)
                {
                    minR = a[i];
                }
                else
                {
                    minR = min(a[i], b[j]);
                }

                return 0.5*(maxL + minR);
            }
        
    }
};


Solution 2: find k-th smallest number
51.41%
Time complexity: O( log(m+n) )
space complexity: 1

class Solution {
public:
    int findkth(int k, vector<int>::iterator a_begin, vector<int>::iterator a_end, vector<int>::iterator b_begin, vector<int>::iterator b_end) {//0-based       
        int m = distance(a_begin, a_end);
        int n = distance(b_begin, b_end);
        if (a_begin == a_end) return *(b_begin+k);
        if (b_begin == b_end) return *(a_begin+k);
        if (k == 0) return min(*a_begin, *b_begin); //k will finally reduce to 0 no matter k starts as an odd or an even number.
        int half = (k+1)/2;
        int aind = min(half, m);
        int bind = min(half, n);
        if(a_begin[aind-1] < b_begin[bind-1]) 
        {
            return findkth(k-aind, a_begin+aind, a_end, b_begin, b_end);
        }
        else 
        {
            return findkth(k-bind, a_begin, a_end, b_begin+bind, b_end);
        }  
    }
    
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int total = nums1.size() + nums2.size();
        int k = total / 2;
        int m1 = findkth(k, nums1.begin(), nums1.end(), nums2.begin(), nums2.end()); //0-based       
        if (total % 2)
        {
            return m1;
        }
        int m2 = findkth(k-1, nums1.begin(), nums1.end(), nums2.begin(), nums2.end());
        return 0.5*(m1 + m2);
    }
};
